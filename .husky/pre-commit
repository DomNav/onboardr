#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# ===================================================================
# Pre-commit hook for secret detection
# ===================================================================
# This hook runs before every commit to scan for secrets using
# multiple detection methods to prevent accidental secret commits.
# ===================================================================

echo "üîí Running secret detection before commit..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if detect-secrets is installed
if ! command -v detect-secrets >/dev/null 2>&1; then
    echo "${YELLOW}‚ö†Ô∏è  detect-secrets not found. Installing...${NC}"
    pip install detect-secrets
    
    if ! command -v detect-secrets >/dev/null 2>&1; then
        echo "${RED}‚ùå Failed to install detect-secrets. Please install manually:${NC}"
        echo "   pip install detect-secrets"
        exit 1
    fi
fi

# Initialize detect-secrets baseline if it doesn't exist
if [ ! -f .secrets.baseline ]; then
    echo "${BLUE}üìù Creating detect-secrets baseline...${NC}"
    detect-secrets scan --all-files --force-use-all-plugins \
        --exclude-files '\.git/.*|node_modules/.*|dist/.*|\.env\.example|pnpm-lock\.yaml|package-lock\.json' \
        > .secrets.baseline
fi

# Scan staged files for secrets
echo "${BLUE}üîç Scanning staged files for secrets...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo "${GREEN}‚úÖ No staged files to scan.${NC}"
    exit 0
fi

# Scan each staged file
SECRET_FOUND=0
for file in $STAGED_FILES; do
    # Skip binary files and known safe files
    if [[ "$file" =~ \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|mp4|mp3|avi|mov|pdf|zip|tar|gz)$ ]]; then
        continue
    fi
    
    if [[ "$file" =~ (package-lock\.json|pnpm-lock\.yaml|yarn\.lock)$ ]]; then
        continue
    fi
    
    # Use detect-secrets to scan the file
    if detect-secrets scan --string "$(git show ":$file")" --all-plugins >/dev/null 2>&1; then
        continue
    else
        echo "${RED}‚ùå Potential secret detected in: $file${NC}"
        SECRET_FOUND=1
    fi
    
    # Additional manual checks for common secret patterns
    if git show ":$file" | grep -qE "(sk-[a-zA-Z0-9]{48}|xoxb-[0-9]+-[0-9]+-[a-zA-Z0-9]+|AIza[0-9A-Za-z\\-_]{35})"; then
        echo "${RED}‚ùå High-entropy secret pattern detected in: $file${NC}"
        SECRET_FOUND=1
    fi
    
    # Check for .env files being committed
    if [[ "$file" =~ \.env$ ]] || [[ "$file" =~ \.env\. ]] && [[ ! "$file" =~ \.env\.example$ ]]; then
        echo "${RED}‚ùå Environment file should not be committed: $file${NC}"
        echo "   Add to .gitignore or rename to .env.example"
        SECRET_FOUND=1
    fi
done

if [ $SECRET_FOUND -eq 1 ]; then
    echo ""
    echo "${RED}üö® COMMIT BLOCKED - Secrets detected!${NC}"
    echo ""
    echo "To fix this:"
    echo "1. Remove the secrets from the files"
    echo "2. Add secrets to environment variables instead"
    echo "3. Update .env.example files with placeholder values"
    echo "4. Add sensitive files to .gitignore"
    echo ""
    echo "For false positives, update .secrets.baseline:"
    echo "   detect-secrets scan --baseline .secrets.baseline"
    echo ""
    exit 1
fi

echo "${GREEN}‚úÖ No secrets detected. Commit proceeding...${NC}"
exit 0