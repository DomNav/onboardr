'use client';

import React, { useState, useEffect, lazy, Suspense } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { CheckCircle, ArrowLeft, ArrowRight, User, Settings, ExternalLink, Loader2, AlertCircle } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { useWallet } from '@/contexts/WalletContext';
import { useProfileStore } from '@/store/profile';
import { useCurrency } from '@/contexts/CurrencyContext';
import { uploadMetadata } from '@/lib/ipfs';
import { triggerBalanceRefresh } from '@/lib/balanceEvents';
import { toast } from 'sonner';
import { generateAvatarSVG as generateAvatar } from '@/lib/avatarUtils';

const Confetti = lazy(() => import('react-confetti'));

interface MintProfileModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess?: () => void;
}

interface FormData {
  name: string;
  avatar: string;
  fiat: string;
}

type MintingState = 
  | 'idle'
  | 'preparing'     // Uploading to IPFS, preparing XDR
  | 'signing'       // Waiting for user to sign in Freighter
  | 'submitting'    // Submitting signed transaction
  | 'confirming'    // Waiting for network confirmation
  | 'success'       // Transaction confirmed
  | 'error';        // Error occurred

export default function MintProfileModal({ isOpen, onClose, onSuccess }: MintProfileModalProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<FormData>({
    name: '',
    avatar: '',
    fiat: 'USD'
  });
  const [mintingState, setMintingState] = useState<MintingState>('idle');
  const [error, setError] = useState<string | null>(null);
  const [txStatus, setTxStatus] = useState<any>(null);
  const [showConfetti, setShowConfetti] = useState(false);
  
  const { address, network } = useWallet();
  const { currency } = useCurrency();
  const { setHasProfileNFT, setProfileMetadata, setCurrency } = useProfileStore();
  
  // Force simulation mode for demo - always simulate successful mint
  const isSimulated = true; // process.env.NEXT_PUBLIC_SIMULATE_PROFILE_MINT === 'true';

  // Generate avatar when name changes
  useEffect(() => {
    if (formData.name.trim()) {
      setFormData(prev => ({
        ...prev,
        avatar: generateAvatar(formData.name)
      }));
    }
  }, [formData.name]);

  const handleNext = () => {
    if (currentStep < 2) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  // Simulate mint for demo purposes
  const simulateMint = async () => {
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Return simulated successful mint result
    return {
      tokenId: `NFT-${Date.now()}`,
      txHash: `0x${Math.random().toString(16).substr(2, 64)}`,
      explorerUrl: `https://stellar.expert/explorer/testnet/tx/${Math.random().toString(16).substr(2, 64)}`,
      assetCode: 'PROFILE',
      issuer: 'GBSIMULATED' + Math.random().toString(36).substr(2, 44).toUpperCase()
    };
  };

  const handleMint = async () => {
    if (!address) return;
    
    setError(null);
    
    try {
      // Step 1: Prepare metadata and upload to IPFS
      setMintingState('preparing');
      console.log('🏗️ Preparing metadata for minting...');
      
      const metadata = {
        name: formData.name,
        avatar: formData.avatar,
        fiat: formData.fiat,
        preferredCurrency: currency.code,
        vectorKey: '' // Will be generated by backend
      };
      
      let mintResult: any;
      
      if (isSimulated) {
        // Use simulated mint for demo
        console.log('🧪 Running demo mint simulation...');
        
        // Simulate signing step
        setMintingState('signing');
        await new Promise(r => setTimeout(r, 1000));
        
        // Simulate submitting
        setMintingState('submitting');
        await new Promise(r => setTimeout(r, 800));
        
        // Simulate confirming
        setMintingState('confirming');
        mintResult = await simulateMint();
        
        // Update profile store for simulated mint
        setHasProfileNFT(true);
        setProfileMetadata({
          ...metadata,
          vectorKey: `vec_${Date.now()}`,
          tokenId: mintResult.tokenId
        });
        setCurrency(currency.code as any);
        
        // Set transaction status for display
        setTxStatus({
          hash: mintResult.txHash,
          explorerUrl: mintResult.explorerUrl,
          successful: true
        });
        
        setMintingState('success');
        setShowConfetti(true);
        
        // Show success toast
        toast.success(`Profile NFT minted successfully! 🎉`);
        
      } else {
        // Real mint flow
        // Upload metadata to IPFS (this will use mock if NFT_STORAGE_TOKEN not configured)
        const ipfsUri = await uploadMetadata(metadata);
        console.log('📦 Metadata uploaded to IPFS:', ipfsUri);
        
        // Call backend to prepare mint transaction
        const response = await fetch('/api/profile/mint', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            walletAddress: address,
            metadata,
            tokenURI: ipfsUri,
            network: network
          })
        });
        
        if (!response.ok) {
        const errorData = await response.json();
        
        // Handle specific error codes from our API
        switch (errorData.code) {
          case 'CONFIG_ERROR':
            throw new Error('Service configuration error. Please contact support.');
          case 'SPONSOR_NOT_FOUND':
          case 'SPONSOR_INSUFFICIENT_FUNDS':
            throw new Error('SAC NFT minting service is temporarily unavailable. Please try again later.');
          case 'NETWORK_TIMEOUT':
            throw new Error('Network is experiencing delays. Please wait a moment and try again.');
          case 'SEQUENCE_CONFLICT':
            throw new Error('Please wait a moment and try minting again.');
          case 'STELLAR_TX_FAILED':
            throw new Error(`Transaction failed: ${errorData.details || 'Please check your connection and try again.'}`);
          case 'ALREADY_OWNS_TOKEN':
            throw new Error('This wallet already owns a Profile NFT.');
          case 'INVALID_METADATA':
            throw new Error('Invalid profile information. Please check your inputs and try again.');
          default:
            throw new Error(errorData.error || errorData.details || 'Failed to mint Profile NFT');
        }
        }
        
        const { 
          assetCode, 
          issuer, 
          txHash, 
          metadata: fullMetadata 
        } = await response.json();
        console.log('✅ SAC NFT minted successfully');
        
        // Step 2: Success!
        setMintingState('success');
        setShowConfetti(true);
        console.log('🎉 Profile SAC NFT minted successfully!');
        
        // Update profile store
        setHasProfileNFT(true);
        setProfileMetadata(fullMetadata);
        setCurrency(currency.code as any);
        
        // Set transaction status for display
        const networkPath = network === 'mainnet' ? 'public' : 'testnet';
        setTxStatus({
          hash: txHash,
          explorerUrl: `https://stellar.expert/explorer/${networkPath}/asset/${assetCode}-${issuer}`,
          successful: true
        });
        
        // Show success toast with explorer link
        toast.success(`Profile SAC NFT minted successfully! 🎉`, {
          action: {
            label: 'View Asset',
            onClick: () => window.open(`https://stellar.expert/explorer/${networkPath}/asset/${assetCode}-${issuer}`, '_blank')
          }
        });
      }
      
      // Trigger balance refresh to show the new NFT immediately
      triggerBalanceRefresh();
      
      // Auto-close after showing success with a bit more time to see the confetti
      setTimeout(() => {
        onClose();
        onSuccess?.();
      }, 3000);
      
    } catch (error: any) {
      console.error('❌ Minting failed:', error);
      setError(error.message || 'Failed to mint profile NFT');
      setMintingState('error');
    }
  };

  const handleClose = () => {
    setCurrentStep(1);
    setMintingState('idle');
    setTxStatus(null);
    setError(null);
    setShowConfetti(false);
    setFormData({
      name: '',
      avatar: '',
      fiat: 'USD'
    });
    onClose();
  };

  const handleRetry = () => {
    setMintingState('idle');
    setTxStatus(null);
    setError(null);
    setCurrentStep(2); // Go back to confirmation step
  };

  const isStepValid = () => {
    switch (currentStep) {
      case 1:
        return formData.name.trim().length >= 2;
      case 2:
        return formData.fiat;
      default:
        return false;
    }
  };

  const isMinting = ['preparing', 'signing', 'submitting', 'confirming'].includes(mintingState);
  const showSpinner = ['preparing', 'submitting', 'confirming'].includes(mintingState);
  const showSuccess = mintingState === 'success';
  const showError = mintingState === 'error';

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="text-center">
            Create Your Profile NFT
          </DialogTitle>
          <DialogDescription className="text-center">
            Set up your personalized profile to unlock AI features and track your preferences.
          </DialogDescription>
        </DialogHeader>

        <AnimatePresence mode="wait">
          {showSuccess ? (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              className="text-center space-y-4 py-8"
            >
              {showConfetti && (
                <Suspense fallback={null}>
                  <Confetti 
                    width={typeof window !== 'undefined' ? window.innerWidth : 800}
                    height={typeof window !== 'undefined' ? window.innerHeight : 600}
                    recycle={false}
                    numberOfPieces={200}
                  />
                </Suspense>
              )}
              <CheckCircle className="w-16 h-16 mx-auto text-green-500" />
              <div>
                <h3 className="text-xl font-semibold text-green-700">
                  Profile NFT Minted! 🎉
                </h3>
                <p className="text-sm text-muted-foreground mt-2">
                  Welcome to Soro! Your AI assistant is now ready.
                </p>
                {txStatus && (
                  <a
                    href={txStatus.explorerUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-1 text-xs text-blue-600 hover:text-blue-800 mt-2"
                  >
                    View Asset on Stellar Expert
                    <ExternalLink className="w-3 h-3" />
                  </a>
                )}
              </div>
            </motion.div>
          ) : showError ? (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              className="text-center space-y-4 py-8"
            >
              <AlertCircle className="w-16 h-16 mx-auto text-red-500" />
              <div>
                <h3 className="text-xl font-semibold text-red-700">
                  Minting Failed
                </h3>
                <p className="text-sm text-muted-foreground mt-2">
                  {error}
                </p>
                {txStatus && (
                  <a
                    href={txStatus.explorerUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-1 text-xs text-blue-600 hover:text-blue-800 mt-2"
                  >
                    View transaction
                    <ExternalLink className="w-3 h-3" />
                  </a>
                )}
              </div>
              <Button onClick={handleRetry} className="mt-4">
                Try Again
              </Button>
            </motion.div>
          ) : isMinting ? (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              className="text-center space-y-4 py-8"
            >
              {showSpinner && <Loader2 className="w-16 h-16 mx-auto text-teal-600 animate-spin" />}
              {mintingState === 'signing' && <User className="w-16 h-16 mx-auto text-teal-600" />}
              
              <div>
                <h3 className="text-xl font-semibold">
                  {mintingState === 'preparing' && 'Preparing Transaction...'}
                  {mintingState === 'signing' && 'Sign with Freighter'}
                  {mintingState === 'submitting' && 'Submitting Transaction...'}
                  {mintingState === 'confirming' && 'Confirming Transaction...'}
                </h3>
                <p className="text-sm text-muted-foreground mt-2">
                  {mintingState === 'preparing' && 'Uploading metadata to IPFS...'}
                  {mintingState === 'signing' && 'Please approve the transaction in your Freighter wallet'}
                  {mintingState === 'submitting' && 'Broadcasting to Stellar network...'}
                  {mintingState === 'confirming' && 'Waiting for network confirmation...'}
                </p>
                
                {txStatus && (
                  <div className="mt-4 space-y-2">
                    <div className="text-xs text-muted-foreground">
                      Transaction: {txStatus.hash.slice(0, 8)}...{txStatus.hash.slice(-8)}
                    </div>
                    <div className="text-xs text-muted-foreground">
                      Time elapsed: {Math.round(txStatus.elapsedTime / 1000)}s
                    </div>
                    <a
                      href={txStatus.explorerUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center gap-1 text-xs text-blue-600 hover:text-blue-800"
                    >
                      View on Stellar Expert
                      <ExternalLink className="w-3 h-3" />
                    </a>
                  </div>
                )}
              </div>
            </motion.div>
          ) : (
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.3 }}
              className="space-y-6"
            >
              {/* Progress Indicator */}
              <div className="flex items-center justify-between mb-6">
                {[1, 2].map((s) => (
                  <div key={s} className="flex items-center">
                    <div
                      className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${
                        s <= currentStep
                          ? 'bg-teal-600 text-white'
                          : 'bg-gray-200 text-gray-500'
                      }`}
                    >
                      {s}
                    </div>
                    {s < 2 && (
                      <div
                        className={`w-16 h-1 mx-2 transition-colors ${
                          s < currentStep ? 'bg-teal-600' : 'bg-gray-200'
                        }`}
                      />
                    )}
                  </div>
                ))}
              </div>

              {/* Step 1: Profile Info */}
              {currentStep === 1 && (
                <div className="space-y-4">
                  <div className="text-center">
                    <User className="w-12 h-12 mx-auto mb-3 text-teal-600" />
                    <h3 className="text-lg font-semibold">Profile Information</h3>
                    <p className="text-sm text-muted-foreground">
                      Choose your display name and avatar
                    </p>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">
                        Display Name
                      </label>
                      <Input
                        placeholder="Enter your name"
                        value={formData.name}
                        onChange={(e) =>
                          setFormData(prev => ({ ...prev, name: e.target.value }))
                        }
                        maxLength={50}
                      />
                    </div>

                    {formData.name && (
                      <div className="flex justify-center">
                        <div className="text-center">
                          <img
                            src={formData.avatar}
                            alt="Generated avatar"
                            className="w-20 h-20 rounded-full mx-auto mb-2"
                          />
                          <p className="text-xs text-muted-foreground">
                            Auto-generated avatar
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Step 2: Trading Preferences & Confirmation */}
              {currentStep === 2 && (
                <div className="space-y-4">
                  <div className="text-center">
                    <Settings className="w-12 h-12 mx-auto mb-3 text-teal-600" />
                    <h3 className="text-lg font-semibold">Trading Preferences</h3>
                    <p className="text-sm text-muted-foreground">
                      Set your fiat currency and review your profile
                    </p>
                  </div>

                  <div className="space-y-6">
                    {/* Profile Review */}
                    <Card>
                      <CardContent className="p-6">
                        <div className="text-center space-y-4">
                          <img
                            src={formData.avatar}
                            alt="Profile avatar"
                            className="w-16 h-16 rounded-full mx-auto"
                          />
                          <div>
                            <h4 className="font-semibold">{formData.name}</h4>
                            <p className="text-sm text-muted-foreground">
                              {currency.symbol} {currency.code} · {currency.name}
                            </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <div className="bg-blue-50 p-4 rounded-xl">
                      <p className="text-sm text-blue-800">
                        <strong>Note:</strong> This NFT is soul-bound and cannot be transferred. 
                        It will unlock access to the Soro AI assistant and provide personalized 
                        trading recommendations.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {/* Navigation */}
              <div className="flex justify-center">
                {currentStep < 2 ? (
                  <Button
                    onClick={handleNext}
                    disabled={!isStepValid()}
                    className="w-full max-w-xs"
                  >
                    Next
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                ) : (
                  <div className="flex justify-between w-full">
                    <Button
                      variant="secondary"
                      onClick={handleBack}
                    >
                      <ArrowLeft className="w-4 h-4 mr-2" />
                      Back
                    </Button>

                    <Button
                      onClick={handleMint}
                      disabled={isMinting || !isStepValid()}
                    >
                      {isMinting ? 'Minting...' : 'Mint Profile NFT'}
                    </Button>
                  </div>
                )}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </DialogContent>
    </Dialog>
  );
}